#!/usr/bin/env python3
# -*- conding: utf-8 -*-
# code by: J03
# date : 23 - 12 - 2020

import socket
import threading
from .server import Server
import pprint
import random

options = {
	"host": '',
	"port": '5555',
}

text_asci = ["""
 ▄▄   ▄▄ ▄▄   ▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄   ▄▄▄ ▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄
█  █▄█  █  █ █  █       █       █   ▄  █ █   █       █       █
█       █  █▄█  █  ▄▄▄▄▄█       █  █ █ █ █   █    ▄  █▄     ▄█
█       █       █ █▄▄▄▄▄█     ▄▄█   █▄▄█▄█   █   █▄█ █ █   █
█       █▄     ▄█▄▄▄▄▄  █    █  █    ▄▄  █   █    ▄▄▄█ █   █
█ ██▄██ █ █   █  ▄▄▄▄▄█ █    █▄▄█   █  █ █   █   █     █   █
█▄█   █▄█ █▄▄▄█ █▄▄▄▄▄▄▄█▄▄▄▄▄▄▄█▄▄▄█  █▄█▄▄▄█▄▄▄█     █▄▄▄█
""",
"""
▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
█░▄▀▄░█░██░█░▄▄█▀▄▀█░▄▄▀██▄██▀▄▄▀█▄░▄
█░█▄█░█░▀▀░█▄▄▀█░█▀█░▀▀▄██░▄█░▀▀░██░█
█▄███▄█▀▀▀▄█▄▄▄██▄██▄█▄▄█▄▄▄█░█████▄█
▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀

""",
"""
						   ╔╗
						  ╔╝╚╗
╔╗╔╗╔╗ ╔╗╔══╗╔══╗╔═╗╔╗╔══╗╚╗╔╝
║╚╝║║║ ║║║══╣║╔═╝║╔╝╠╣║╔╗║ ║║
║║║║║╚═╝║╠══║║╚═╗║║ ║║║╚╝║ ║╚╗
╚╩╩╝╚═╗╔╝╚══╝╚══╝╚╝ ╚╝║╔═╝ ╚═╝
	╔═╝║              ║║
	╚══╝              ╚╝

""",
"""
  ___              ___
 (o o)            (o o)
(  V  ) myscript (  V  )
--m-m--------------m-m--
"""]


def art_asci():
	i = random.randrange(0 , len(text_asci))
	print(text_asci[i])

class Exploit(Server):
	command = {
	"show":     'avoir une appercu des options',
	"set":      'set host ou port [value]',
	"listen":   'listen: lance le serveur sur le port 5555 par defaut',
	"exit":     'pour quitter le programme',
	"help":     'pour voir le manuel aide'
	}

	def __init__(self):
		Server.__init__(self)

	def set(self, args):
		if args[1] in options:
			options[args[1]] = args[2]
		else:
			print("option not found")

	def listen(self, args=None):
		self.runserver(options["host"], int(options["port"]))

	def exit(self, args=None):
		exit()

	def show(self, args=None):
		print(options)

	def screenshot(self, args):
		pass

	def help(self, args):
		try:
			if args[1] in self.command:
				print(self.command[args[1]])
			else:
				pprint.pprint(self.command)
		except:
			pprint.pprint(self.command)
